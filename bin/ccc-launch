#!/bin/bash
#
# ccc-launch: Launch Claude Code with CCC integration
# Auto-sets up CCC toolkit if needed and runs CodebaseAnalyzerAgent for Python projects
#
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

CCC_DIR="/home/loki/code/ccc"

print_header() {
    echo -e "${BLUE}${BOLD}🚀 CCC Launch - Claude Code with Beast Mode Integration${NC}"
    echo "=============================================================="
}

print_step() {
    echo -e "${BLUE}▶ $1${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

check_ccc_system() {
    if [ ! -d "$CCC_DIR" ]; then
        print_error "CCC system not found at $CCC_DIR"
        echo "Please install CCC first: cd $CCC_DIR && ./install.sh"
        exit 1
    fi
    
    if [ ! -f "$CCC_DIR/bin/claude-work" ]; then
        print_error "CCC tools not found. Please run: cd $CCC_DIR && ./install.sh"
        exit 1
    fi
}

setup_ccc_if_needed() {
    local current_dir=$(pwd)
    
    print_step "Checking CCC setup in current directory..."
    
    if [ ! -d ".claude" ]; then
        print_warning "CCC toolkit not found - setting up automatically..."
        
        # Run claude-work to set up the toolkit
        if "$CCC_DIR/bin/claude-work" .; then
            print_success "CCC toolkit set up successfully"
        else
            print_error "Failed to set up CCC toolkit"
            exit 1
        fi
    else
        print_success "CCC toolkit already available"
    fi
}

detect_project_type() {
    local project_type="unknown"
    
    # Check for Python project indicators
    if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "setup.py" ] || [ -f "Pipfile" ] || [ -f "poetry.lock" ]; then
        project_type="python"
    elif [ -f "wp-config.php" ] || [ -d "wp-content" ] || [ -f "functions.php" ]; then
        project_type="wordpress"
    elif [ -d "data" ] && ([ -f "*.csv" ] || [ -f "*.xlsx" ]); then
        project_type="seo"
    fi
    
    echo "$project_type"
}

check_virtual_environment() {
    print_step "Checking virtual environment..."
    
    # Check if we're already in a virtual environment
    if [[ -n "$VIRTUAL_ENV" ]]; then
        print_success "Already in virtual environment: $(basename $VIRTUAL_ENV)"
        return 0
        
    elif [[ -f "venv/bin/activate" ]]; then
        print_warning "Found venv/ directory - you may want to activate it"
        echo "  Run: source venv/bin/activate"
        
    elif [[ -f ".venv/bin/activate" ]]; then
        print_warning "Found .venv/ directory - you may want to activate it"
        echo "  Run: source .venv/bin/activate"
        
    elif [[ -f "env/bin/activate" ]]; then
        print_warning "Found env/ directory - you may want to activate it"  
        echo "  Run: source env/bin/activate"
        
    else
        print_warning "No virtual environment detected"
    fi
}

check_claude_cli() {
    print_step "Checking Claude CLI availability..."
    
    if ! command -v claude &> /dev/null; then
        print_error "Claude CLI not found. Please install it first:"
        echo -e "${YELLOW}   pip install claude-cli${NC}"
        echo -e "${YELLOW}   # or${NC}"
        echo -e "${YELLOW}   npm install -g @anthropic/claude-cli${NC}"
        exit 1
    fi
    
    print_success "Claude CLI available"
}

create_launch_message() {
    local project_type="$1"
    local current_dir=$(basename "$(pwd)")
    
    # Detect which CLAUDE.md is being used
    local claude_md_info=""
    if [ -f "CLAUDE.md" ]; then
        # Check if it's a CCC-enhanced version
        if grep -q "LINE ENDINGS RULE.*TOP PRIORITY" "CLAUDE.md" 2>/dev/null; then
            claude_md_info="🎯 **CCC Enhanced CLAUDE.md** (Beast Mode Active)"
        else
            claude_md_info="📄 **Standard CLAUDE.md** (Basic Version)"
        fi
    elif [ -f ".claude/CLAUDE.md" ]; then
        claude_md_info="📁 **CCC Toolkit CLAUDE.md** (.claude/ directory)"
    else
        claude_md_info="❓ **No CLAUDE.md detected**"
    fi
    
    cat > /tmp/ccc_launch_message.md << EOF
# 🚀 CCC Launch Complete

## 📍 Project Context
- **Directory**: \`$(pwd)\`
- **Project Type**: \`${project_type}\`
- **CCC Status**: ✅ Active (toolkit in .claude/ directory)
- **CLAUDE.md**: ${claude_md_info}

## 🤖 Available Agents
You now have access to 23 specialized agents. Key agents for this project:

EOF

    if [ "$project_type" = "python" ]; then
        cat >> /tmp/ccc_launch_message.md << EOF
### 🐍 Python Development Agents
- **SystemArchitectAgent**: System design and architecture validation
- **FeatureDeveloperAgent**: Feature implementation with atomic changes
- **CodebaseAnalyzerAgent**: Deep code analysis and pattern detection
- **QualityTesterAgent**: Test strategy and coverage analysis
- **PerformanceProfilerAgent**: Performance optimization and profiling
- **SecurityAuditorAgent**: Security analysis and vulnerability assessment

### 🎯 Recommended First Action
I'll now invoke **CodebaseAnalyzerAgent** to analyze this Python project and provide insights.

EOF
    elif [ "$project_type" = "seo" ]; then
        cat >> /tmp/ccc_launch_message.md << EOF
### 📈 SEO Research Agents
- **KeywordStrategyAgent**: Keyword research and content strategy
- **TechnicalSEOAgent**: Technical SEO audits and optimization
- **ConversionOptimizerAgent**: CRO analysis and funnel optimization
- **MetricsReporterAgent**: Analytics and performance tracking

EOF
    elif [ "$project_type" = "wordpress" ]; then
        cat >> /tmp/ccc_launch_message.md << EOF
### 🔧 WordPress Development Agents
- **WordPressBuilderAgent**: Theme and plugin development
- **ElementorSpecialistAgent**: Custom Elementor widgets and layouts
- **SecurityAuditorAgent**: WordPress security analysis
- **PerformanceProfilerAgent**: WordPress performance optimization

EOF
    fi

    cat >> /tmp/ccc_launch_message.md << EOF
## 📋 Available Commands
Access 70+ curated commands in \`.claude/commands/\`:
- **Shared commands**: Universal project tools
- **Type-specific commands**: Optimized for ${project_type} development

## 📖 Documentation
- **CLAUDE.md**: Agent orchestration guide (current directory)
- **Complete docs**: $CCC_DIR/docs/index.html

## 🔧 Cleanup
When done: \`ccc-work --cleanup\` or \`ccc-clean\`

---
*CCC Beast Mode Activated - Ready for autonomous development!*
EOF
}

launch_claude_with_analysis() {
    local project_type="$1"
    
    print_step "Launching Claude Code with bypass permissions..."
    
    # Create the launch message
    create_launch_message "$project_type"
    
    print_success "Claude Code launching with CCC integration..."
    echo
    echo -e "${YELLOW}📋 What happens next:${NC}"
    echo "  1. Claude Code opens with bypass permissions enabled"
    echo "  2. Navigate to your project directory in Claude"
    echo "  3. CCC toolkit is ready with CLAUDE.md and all agents"
    
    if [ "$project_type" = "python" ]; then
        echo "  4. CodebaseAnalyzerAgent will analyze your Python project"
        echo
        echo -e "${BOLD}🤖 Auto-Analysis Command for Claude:${NC}"
        echo -e "${GREEN}\"Use CodebaseAnalyzerAgent to analyze this Python codebase and provide insights about its structure, patterns, and opportunities for improvement.\"${NC}"
    fi
    
    echo
    echo -e "${BLUE}🎯 CCC Launch Message created at: /tmp/ccc_launch_message.md${NC}"
    echo
    
    # Launch Claude with bypass permissions
    exec claude --dangerously-skip-permissions "$@"
}

main() {
    print_header
    echo
    
    # Verify CCC system is available
    check_ccc_system
    
    # Set up CCC toolkit if not already present
    setup_ccc_if_needed
    
    # Detect project type
    local project_type=$(detect_project_type)
    print_success "Project type detected: $project_type"
    
    # Show CLAUDE.md status
    print_step "Checking CLAUDE.md configuration..."
    if [ -f "CLAUDE.md" ]; then
        if grep -q "LINE ENDINGS RULE.*TOP PRIORITY" "CLAUDE.md" 2>/dev/null; then
            print_success "CCC Enhanced CLAUDE.md detected (Beast Mode)"
        else
            print_warning "Standard CLAUDE.md detected (consider upgrading)"
        fi
    elif [ -f ".claude/CLAUDE.md" ]; then
        print_success "CCC Toolkit CLAUDE.md available"
    else
        print_warning "No CLAUDE.md detected - limited agent capabilities"
    fi
    
    # Check virtual environment (informational)
    check_virtual_environment
    
    # Verify Claude CLI is available
    check_claude_cli
    
    echo
    print_success "🎉 CCC setup complete - launching Claude Code..."
    echo
    
    # Launch Claude with analysis integration
    launch_claude_with_analysis "$project_type"
}

# Help function
show_help() {
    echo "ccc-launch - Launch Claude Code with CCC Beast Mode Integration"
    echo
    echo "Usage: ccc-launch [options]"
    echo
    echo "What this command does:"
    echo "  ✅ Checks/sets up CCC toolkit in current directory" 
    echo "  ✅ Detects project type (Python/SEO/WordPress)"
    echo "  ✅ Launches Claude Code with bypass permissions"
    echo "  ✅ For Python projects: Sets up CodebaseAnalyzerAgent invocation"
    echo
    echo "Options:"
    echo "  -h, --help    Show this help message"
    echo
    echo "Examples:"
    echo "  cd /your/python/project"
    echo "  ccc-launch                    # Auto-setup CCC and launch Claude"
    echo
    echo "After launch:"
    echo "  - Navigate to your project in Claude Code"
    echo "  - Use CLAUDE.md for agent orchestration"
    echo "  - All 23 agents available for development"
    echo "  - Run 'ccc-clean' when done to cleanup"
}

# Handle command line arguments
case "${1:-}" in
    -h|--help)
        show_help
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac
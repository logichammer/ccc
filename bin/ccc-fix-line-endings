#!/bin/bash
#
# CCC Line Endings Fix Script
# Prevents recurring line ending issues that cause script failures
#
set -e

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

CCC_DIR="/home/loki/code/ccc"

print_header() {
    echo -e "${BLUE}🔧 CCC Line Endings Fix${NC}"
    echo "=================================="
    echo
}

print_step() {
    echo -e "${BLUE}▶ $1${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

check_line_endings() {
    print_step "Checking for Windows line endings..."
    
    local found_files=0
    
    # Find files with Windows line endings
    while IFS= read -r -d '' file; do
        if grep -q $'\r' "$file"; then
            print_warning "Found Windows line endings in: $file"
            ((found_files++))
        fi
    done < <(find "$CCC_DIR" -type f \( -name "*.py" -o -name "*.sh" -o -name "*.md" -o -name "*.txt" -o -name "*.toml" -o -name "*.php" -o -name "*.js" -o -name "*.css" \) -print0)
    
    if [ $found_files -eq 0 ]; then
        print_success "No Windows line endings found"
        return 0
    else
        print_warning "Found Windows line endings in $found_files files"
        return 1
    fi
}

fix_line_endings() {
    print_step "Fixing line endings for all CCC files..."
    
    local fixed_count=0
    
    # Fix line endings for all relevant file types
    find "$CCC_DIR" -type f \( \
        -name "*.py" -o \
        -name "*.sh" -o \
        -name "*.md" -o \
        -name "*.txt" -o \
        -name "*.toml" -o \
        -name "*.php" -o \
        -name "*.js" -o \
        -name "*.css" -o \
        -name "*.html" -o \
        -name "*.json" \
    \) -exec sed -i 's/\r$//' {} \; -exec bash -c 'echo "Fixed: $1"' _ {} \; | wc -l > /tmp/ccc_fixed_count
    
    fixed_count=$(cat /tmp/ccc_fixed_count)
    rm -f /tmp/ccc_fixed_count
    
    print_success "Fixed line endings in $fixed_count files"
}

fix_permissions() {
    print_step "Fixing script permissions..."
    
    # Make all shell scripts and Python scripts executable
    find "$CCC_DIR" -name "*.sh" -exec chmod +x {} \;
    find "$CCC_DIR/bin" -type f -exec chmod +x {} \;
    
    print_success "Fixed script permissions"
}

configure_git() {
    print_step "Configuring Git to prevent line ending issues..."
    
    cd "$CCC_DIR"
    
    # Set Git configuration to prevent line ending conversion
    git config core.autocrlf false
    git config core.eol lf
    
    # Create or update .gitattributes file
    cat > .gitattributes << 'EOF'
# Ensure line endings are LF for all text files
* text=auto eol=lf

# Explicitly set line endings for specific file types
*.sh text eol=lf
*.py text eol=lf
*.md text eol=lf
*.txt text eol=lf
*.toml text eol=lf
*.json text eol=lf
*.html text eol=lf
*.css text eol=lf
*.js text eol=lf
*.php text eol=lf

# Binary files
*.png binary
*.jpg binary
*.jpeg binary
*.gif binary
*.ico binary
*.pdf binary
EOF
    
    print_success "Configured Git for Unix line endings"
}

verify_fix() {
    print_step "Verifying fix..."
    
    if check_line_endings; then
        print_success "Line ending fix verified - all files clean"
        return 0
    else
        print_error "Some files still have Windows line endings"
        return 1
    fi
}

show_prevention_tips() {
    echo
    echo -e "${BLUE}🛡️  Prevention Tips:${NC}"
    echo "==================="
    echo
    echo "1. Run this script before any major work:"
    echo "   ccc-fix-line-endings"
    echo
    echo "2. Before creating/editing files:"
    echo "   find . -name '*.py' -o -name '*.sh' -exec sed -i 's/\r$//' {} \\;"
    echo
    echo "3. Before committing to git:"
    echo "   grep -r \$'\\r' . || echo '✅ Line endings OK'"
    echo
    echo "4. Emergency fix if scripts fail:"
    echo "   find /home/loki/code/ccc -type f -exec sed -i 's/\r$//' {} \\;"
    echo "   chmod +x /home/loki/code/ccc/bin/* /home/loki/code/ccc/*.sh"
    echo
}

main() {
    print_header
    
    if [ ! -d "$CCC_DIR" ]; then
        print_error "CCC directory not found: $CCC_DIR"
        exit 1
    fi
    
    cd "$CCC_DIR"
    
    # Check current state
    if ! check_line_endings; then
        echo
        read -p "Fix line endings? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            fix_line_endings
            fix_permissions
            configure_git
            
            echo
            if verify_fix; then
                print_success "✅ All line ending issues resolved!"
            else
                print_error "❌ Some issues remain - manual intervention needed"
                exit 1
            fi
        else
            print_warning "Line ending issues not fixed"
            exit 1
        fi
    fi
    
    show_prevention_tips
    
    echo
    print_success "🎉 CCC system line endings are clean and configured!"
}

# Allow running with --force flag to skip prompts
if [ "$1" = "--force" ]; then
    cd "$CCC_DIR"
    fix_line_endings
    fix_permissions
    configure_git
    print_success "Force fix completed"
else
    main
fi
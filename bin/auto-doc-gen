#!/usr/bin/env python3
"""
Auto Documentation Generator for CCC System
Analyzes project structure and generates comprehensive documentation
"""

import os
import sys
import json
import re
from pathlib import Path
from datetime import datetime
import subprocess
import argparse

def detect_project_info(project_dir):
    """Analyze project structure and extract key information"""
    project_path = Path(project_dir)
    # Better name fallback - use absolute path name if current name is empty
    project_name = project_path.name or project_path.resolve().name or 'Project'
    info = {
        'name': project_name,
        'type': [],
        'languages': [],
        'frameworks': [],
        'dependencies': {},
        'structure': {},
        'has_tests': False,
        'entry_points': [],
        'config_files': []
    }
    
    # Detect project types
    has_python_files = len(list(project_path.glob('*.py'))) > 0
    if (project_path / 'requirements.txt').exists() or (project_path / 'pyproject.toml').exists() or has_python_files:
        info['type'].append('python')
        info['languages'].append('Python')
        
    if (project_path / 'package.json').exists():
        info['type'].append('javascript')
        info['languages'].append('JavaScript/Node.js')
        
    if (project_path / 'wp-config.php').exists() or (project_path / 'style.css').exists():
        info['type'].append('wordpress')
        info['languages'].append('PHP')
        
    # Analyze dependencies
    if (project_path / 'requirements.txt').exists():
        with open(project_path / 'requirements.txt') as f:
            deps = [line.strip().split('>=')[0].split('==')[0] for line in f if line.strip() and not line.startswith('#')]
            info['dependencies']['python'] = deps
            
    if (project_path / 'package.json').exists():
        try:
            with open(project_path / 'package.json') as f:
                pkg = json.load(f)
                info['dependencies']['npm'] = list(pkg.get('dependencies', {}).keys())
                info['name'] = pkg.get('name', info['name'])
        except:
            pass
            
    # Detect frameworks
    python_deps = info['dependencies'].get('python', [])
    if 'flask' in python_deps:
        info['frameworks'].append('Flask')
    if 'django' in python_deps:
        info['frameworks'].append('Django')
    if 'fastapi' in python_deps:
        info['frameworks'].append('FastAPI')
    if 'streamlit' in python_deps:
        info['frameworks'].append('Streamlit')
        
    # Check for tests
    test_dirs = ['tests', 'test', '__tests__']
    for test_dir in test_dirs:
        if (project_path / test_dir).exists():
            info['has_tests'] = True
            break
            
    # Find entry points
    common_entry_points = ['main.py', 'app.py', 'server.py', 'index.js', 'index.php']
    for entry in common_entry_points:
        if (project_path / entry).exists():
            info['entry_points'].append(entry)
            
    # Config files
    config_files = ['config.py', 'settings.py', '.env', 'docker-compose.yml', 'Dockerfile']
    for config in config_files:
        if (project_path / config).exists():
            info['config_files'].append(config)
            
    return info

def extract_docstrings(project_dir):
    """Extract docstrings from Python files for API documentation"""
    docstrings = {}
    project_path = Path(project_dir)
    
    for py_file in project_path.rglob('*.py'):
        if '__pycache__' in str(py_file) or 'venv' in str(py_file):
            continue
            
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Simple docstring extraction (could be enhanced with AST)
            functions = re.findall(r'def\s+(\w+)\s*\([^)]*\):\s*"""([^"]+)"""', content, re.DOTALL)
            classes = re.findall(r'class\s+(\w+)[^:]*:\s*"""([^"]+)"""', content, re.DOTALL)
            
            if functions or classes:
                rel_path = py_file.relative_to(project_path)
                docstrings[str(rel_path)] = {
                    'functions': [(name, doc.strip()) for name, doc in functions],
                    'classes': [(name, doc.strip()) for name, doc in classes]
                }
        except:
            continue
            
    return docstrings

def generate_html_documentation(project_info, project_dir, docstrings=None):
    """Generate comprehensive HTML documentation"""
    name = project_info['name'].replace('_', ' ').replace('-', ' ').title()
    types = ', '.join(project_info['type']).title()
    
    html_doc = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{name} - Project Documentation</title>
    <style>
        body {{ 
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; 
            margin: 40px; 
            line-height: 1.6; 
            color: #222; 
            background: #fff; 
        }}
        h1, h2, h3 {{ 
            font-weight: bold; 
            margin-top: 1.5em; 
        }}
        h1 {{
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }}
        h2 {{
            color: #e67e22;
            border-left: 4px solid #e67e22;
            padding-left: 15px;
        }}
        .code-block {{ 
            background: #2c3e50; 
            color: #ecf0f1; 
            padding: 15px; 
            border-radius: 6px; 
            font-family: 'Courier New', monospace; 
            font-size: 14px;
            overflow-x: auto;
            margin: 15px 0;
        }}
        .feature-list {{
            background: #f8f9fa;
            padding: 20px;
            border-left: 4px solid #28a745;
            margin: 15px 0;
        }}
        .requirements-box {{
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }}
        a {{ 
            color: #0366d6; 
            text-decoration: none; 
        }}
        a:hover {{ 
            text-decoration: underline; 
        }}
        .api-section {{
            background: #f1f3f4;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
        }}
    </style>
</head>
<body>
    <h1>{name}</h1>
    <p><strong>{f"A {types} project" if types else "A software project"}</strong> with comprehensive functionality and modern development practices.</p>

    <h2>üöÄ Features</h2>
    <div class="feature-list">"""
    
    # Add features based on detected components
    if project_info['frameworks']:
        html_doc += f"<p><strong>{', '.join(project_info['frameworks'])} Framework Integration:</strong> Built with modern framework architecture</p>"
    if project_info['has_tests']:
        html_doc += "<p><strong>Comprehensive Test Suite:</strong> Reliable code with automated testing</p>"
    if 'python' in project_info['type']:
        html_doc += "<p><strong>Python-Based Architecture:</strong> Modern Python development practices</p>"
    if project_info['config_files']:
        html_doc += "<p><strong>Configurable Setup:</strong> Multiple environment support and configuration</p>"
        
    html_doc += """<p><strong>Production-Ready Code:</strong> Comprehensive error handling and validation</p>
    <p><strong>Complete Documentation:</strong> Full API documentation and usage examples</p>
    <p><strong>Easy Installation:</strong> Simple setup process with clear instructions</p>
    </div>

    <h2>üìã Requirements</h2>
    <div class="requirements-box">"""
    
    # Add requirements
    if 'python' in project_info['languages']:
        html_doc += "<p><strong>Python 3.8+</strong> - Core runtime requirement</p>"
    if project_info['dependencies'].get('python'):
        deps = ', '.join(project_info['dependencies']['python'][:5])
        html_doc += f"<p><strong>Python packages:</strong> {deps}"
        if len(project_info['dependencies']['python']) > 5:
            html_doc += f" (and {len(project_info['dependencies']['python']) - 5} more)"
        html_doc += "</p>"
    if project_info['dependencies'].get('npm'):
        deps = ', '.join(project_info['dependencies']['npm'][:5])
        html_doc += f"<p><strong>Node.js packages:</strong> {deps}"
        if len(project_info['dependencies']['npm']) > 5:
            html_doc += f" (and {len(project_info['dependencies']['npm']) - 5} more)"
        html_doc += "</p>"
            
    html_doc += """</div>

    <h2>üõ†Ô∏è Installation</h2>
    <h3>Quick Start</h3>
    <div class="code-block"># Clone the repository<br>
git clone &lt;repository-url&gt;<br>
cd """ + project_info['name'] + "<br><br># Install dependencies"

    if 'python' in project_info['type']:
        html_doc += "<br>python -m venv venv<br>source venv/bin/activate  # On Windows: venv\\Scripts\\activate<br>pip install -r requirements.txt"

    if 'javascript' in project_info['type']:
        html_doc += "<br>npm install"

    html_doc += """</div>

    <h2>üö¶ Usage</h2>"""
    
    # Add usage examples based on entry points
    if project_info['entry_points']:
        entry = project_info['entry_points'][0]
        if entry.endswith('.py'):
            html_doc += f"""<h3>Basic Usage</h3>
    <div class="code-block"># Run the main application<br>
python {entry}</div>

    <h3>Example Code</h3>
    <div class="code-block"># Example usage of the main functionality<br>
from {entry.replace('.py', '')} import main<br><br>
# Initialize and run<br>
result = main()<br>
print(result)</div>"""
        elif entry.endswith('.js'):
            html_doc += f"""<h3>Basic Usage</h3>
    <div class="code-block"># Run the application<br>
node {entry}</div>

    <h3>Example Usage</h3>
    <div class="code-block">// Example usage<br>
const app = require('./{entry.replace('.js', '')}');<br><br>
// Initialize and run<br>
app.start();</div>"""
    
    # Add API documentation if we have docstrings
    if docstrings and any(docstrings.values()):
        html_doc += """<h2>üìö API Reference</h2>
    <h3>Functions</h3>"""
        for file_path, docs in docstrings.items():
            if docs['functions']:
                html_doc += f"""<div class="api-section">
        <h4>{file_path}</h4>"""
                for func_name, func_doc in docs['functions'][:3]:  # Limit to 3 functions
                    html_doc += f"""<p><strong><code>{func_name}()</code></strong></p>
        <p>{func_doc}</p>"""
                html_doc += "</div>"
                    
        if any(docs['classes'] for docs in docstrings.values()):
            html_doc += "<h3>Classes</h3>"
            for file_path, docs in docstrings.items():
                if docs['classes']:
                    for class_name, class_doc in docs['classes'][:2]:  # Limit to 2 classes
                        html_doc += f"""<div class="api-section">
        <p><strong><code>{class_name}</code></strong></p>
        <p>{class_doc}</p>
        </div>"""
    
    # Add development section
    html_doc += """<h2>üîß Development</h2>
    <h3>Setting up Development Environment</h3>
    <div class="code-block">"""

    if 'python' in project_info['type']:
        html_doc += "# Create virtual environment<br>python -m venv dev-env<br>source dev-env/bin/activate<br><br># Install development dependencies<br>pip install -r requirements.txt<br>pip install pytest black flake8  # Common dev tools"

    if project_info['has_tests']:
        html_doc += "<br><br># Run tests<br>pytest"

    html_doc += """</div>

    <h3>Project Structure</h3>
    <div class="code-block">""" + project_info['name'] + """/<br>
‚îú‚îÄ‚îÄ """ + ('src/' if (Path(project_dir) / 'src').exists() else 'main files...') + """<br>
‚îú‚îÄ‚îÄ """ + ('tests/' if project_info['has_tests'] else 'test files...') + """<br>
‚îú‚îÄ‚îÄ """ + (project_info['config_files'][0] if project_info['config_files'] else 'config files...') + """<br>
‚îî‚îÄ‚îÄ README.md</div>

    <h2>ü§ù Contributing</h2>
    <ol>
        <li>Fork the repository</li>
        <li>Create a feature branch (<code>git checkout -b feature/amazing-feature</code>)</li>
        <li>Commit your changes (<code>git commit -m 'Add amazing feature'</code>)</li>
        <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li>
        <li>Open a Pull Request</li>
    </ol>

    <h2>üìÑ License</h2>
    <p>This project is licensed under the MIT License - see the LICENSE file for details.</p>

    <h2>üôè Acknowledgments</h2>
    <ul>
        <li>Built with modern """ + (project_info['languages'][0] if project_info['languages'] else 'development') + """ practices</li>
        <li>Follows industry standard conventions</li>"""

    if project_info['frameworks']:
        html_doc += f"""<li>Powered by {', '.join(project_info['frameworks'])}</li>"""

    html_doc += f"""<li>Generated with CCC Auto-Documentation System</li>
    </ul>

    <hr>
    <p><em>Documentation generated on {datetime.now().strftime('%Y-%m-%d')} by CCC Auto-Doc Generator</em></p>
</body>
</html>
"""
    
    return html_doc

def main():
    parser = argparse.ArgumentParser(description='Auto Documentation Generator')
    parser.add_argument('--output', default='readme', choices=['readme', 'api', 'full'], 
                       help='Documentation type to generate')
    parser.add_argument('--format', default='html', choices=['markdown', 'html'],
                       help='Output format')
    parser.add_argument('--include-examples', action='store_true', default=True,
                       help='Include code examples')
    parser.add_argument('--project-dir', default='.', help='Project directory')
    
    args = parser.parse_args()
    
    print("üîç Analyzing project structure...")
    project_info = detect_project_info(args.project_dir)
    
    print(f"üìã Detected: {', '.join(project_info['type']).title()} project")
    print(f"üîß Languages: {', '.join(project_info['languages'])}")
    
    if 'python' in project_info['type']:
        print("üìö Extracting docstrings...")
        docstrings = extract_docstrings(args.project_dir)
    else:
        docstrings = None
        
    if args.output in ['readme', 'full']:
        print("üìù Generating comprehensive HTML documentation...")
        
        # Create docs directory
        docs_dir = Path(args.project_dir) / 'docs'
        docs_dir.mkdir(exist_ok=True)
        
        if args.format == 'html':
            # Generate HTML documentation (comprehensive as requested)
            html_content = generate_html_documentation(project_info, args.project_dir, docstrings)
            doc_path = docs_dir / 'index.html'
            
            # Backup existing documentation
            if doc_path.exists():
                backup_path = docs_dir / 'index.html.backup'
                doc_path.rename(backup_path)
                print(f"   üíæ Backed up existing documentation to {backup_path}")
                
            with open(doc_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
                
            print(f"   ‚úÖ Generated comprehensive HTML documentation: {doc_path}")
        else:
            # Fallback to generating markdown README (basic fallback)
            readme_content = f"# {name}\n\n{f'A {types} project' if types else 'A software project'} with comprehensive functionality.\n\n## Installation\n\nRefer to project dependencies and setup instructions.\n\n## Usage\n\nRefer to entry points and configuration files.\n"
            readme_path = Path(args.project_dir) / 'README.md'
            
            if readme_path.exists():
                backup_path = Path(args.project_dir) / 'README.md.backup'
                readme_path.rename(backup_path)
                print(f"   üíæ Backed up existing README to {backup_path}")
                
            with open(readme_path, 'w', encoding='utf-8') as f:
                f.write(readme_content)
                
            print(f"   ‚úÖ Generated {readme_path}")
        
    if args.output == 'api' or (args.output == 'full' and docstrings):
        print("üìñ API documentation generation not yet implemented")
        
    print("üéâ Documentation generation complete!")
    print("\nüí° Pro tip: Use with CodebaseAnalyzerAgent for enhanced analysis:")
    print("   'Use CodebaseAnalyzerAgent to analyze this project then run /auto-doc-gen'")

if __name__ == '__main__':
    main()